{"version":3,"sources":["components/nav-bar/Navbar.js","components/toolbar/ToolBar.js","components/new-todo/NewTodo.js","components/todoitems/TodoItem.js","components/todolist/TodoList.js","components/tododetails/TodoDetails.js","components/App.js","serviceWorker.js","index.js"],"names":["props","state","className","this","title","React","Component","evt","preventDefault","add","onClick","addTodo","bind","todoitem","edittodo","errors","edit","dueTime","setState","formValid","evnt","validateFields","Date","dueDate","slice","split","join","editTodoPut","alert","target","name","value","close","date","Object","keys","length","type","onChange","update","description","saveTodo","closeTodoDiv","todo_item","showDetails","completed","parentNode","remove","deleteTodo","todoComplete","id","todoDetails","completeTodo","show","todo","count","todoList","todolist","map","c","key","showTodo","details","resetEdit","editTodo","errorMessage","showAddTodo","fetch","then","response","a","json","data","ok","error","message","statusText","Promise","reject","catch","toString","newtodo","method","headers","body","JSON","stringify","window","location","reload","text","res","reset","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"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","file":"static/js/main.85b994d8.chunk.js","sourcesContent":["import React from 'react';\nimport './Navbar.scss';\n\nexport default class extends React.Component{\n\n    constructor(props){\n        super(props);\n        this.state = {};\n    }\n\n    //Displays Page title\n    render() {\n        return (\n        <nav className=\"nav-bar\">{this.props.title}</nav>\n        )\n    }\n}","import React from 'react';\nimport './ToolBar.scss';\n\nexport default class extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n\n        };\n    }\n\n    /**\n     * Sets addtodo props to true on click of add button\n     */\n    addTodo(evt) {\n        evt.preventDefault();\n        this.props.add(true);\n    }\n\n    render() {\n        return (\n            <div className=\"toolbar\">\n                <button className=\"add-btn\" onClick={this.addTodo.bind(this)}>Add</button>\n            </div>\n        )\n    }\n}","import React from 'react';\nimport './NewTodo.scss';\n\nexport default class extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            /** holds todo item details on click of edit */\n            todoitem: this.props.edittodo,\n            /** stores error messages based on text field validations*/\n            errors: {},\n            /** sets to true when Edit is clicked */\n            edit: this.props.edit\n        };\n    }\n\n    componentDidMount() {\n        if (this.state.edit) {\n            let todoitem = this.state.todoitem;\n            todoitem.dueTime = '';\n            this.setState({\n                todoitem\n            })\n        }\n    }\n\n    /**\n     * Validates input fields and sets error messages.\n     * @returns {boolean} formValid\n     */\n    validateFields() {\n        let todoitem = this.state.todoitem;\n        let errors = {};\n        let formValid = true;\n\n        if (!todoitem[\"title\"]) {\n            formValid = false;\n            errors[\"title\"] = \"Cannot be empty\";\n        }\n        if (!todoitem[\"description\"]) {\n            formValid = false;\n            errors[\"desc\"] = \"Cannot be empty\";\n        }\n        if (!todoitem[\"dueDate\"]) {\n            formValid = false;\n            errors[\"dueDate\"] = \"Cannot be empty\";\n        }\n        if (!todoitem[\"dueTime\"]) {\n            formValid = false;\n            errors[\"dueTime\"] = \"Cannot be empty\";\n        }\n        this.setState({\n            errors: errors\n        });\n        return formValid;\n\n    }\n\n    /**\n     * Called when clicked on save button when adding new todo item\n     * or editing existing one.\n     * @param {Object} evnt \n     */\n    saveTodo(evnt) {\n\n        evnt.preventDefault();\n\n        if (this.validateFields()) {\n            // Converting input time to DateTime\n            let todoitem = this.state.todoitem;\n            todoitem[\"dueTime\"] = new Date(\n                this.state.todoitem.dueDate.slice(0, 10).split('-').join('/')\n                + \" \" + todoitem[\"dueTime\"]);\n            this.setState({\n                todoitem\n            })\n            if (this.state.edit) {\n                this.props.editTodoPut(this.state.todoitem);\n            } else {\n                this.props.add(this.state.todoitem);\n            }\n        } else {\n            alert(\"Form has errors\");\n        }\n    }\n\n    /**\n     * Called everytime when there is change in input fields\n     * and updated todoitem state\n     */\n    update(evnt) {\n        evnt.preventDefault();\n        let todoitem = this.state.todoitem;\n        let field = evnt.target.name;\n        todoitem[field] = evnt.target.value;\n        this.setState({\n            todoitem\n        });\n    }\n\n    /**\n     * on click of close button cloases NewTodo div\n     */\n    closeTodoDiv() {\n        // Setting close property to false when clicked on edit\n        if (this.state.edit) {\n            this.props.close(false);\n            return;\n        }\n        this.props.close(false);\n    }\n\n    render() {\n        let date = this.state.todoitem.dueDate; // variable to set date value\n        /** Pre populating todo details when clicked on edit\n         *  adjusting date and time formats\n         * */\n        if (this.state.edit) {\n\n            if (Object.keys(this.state.todoitem.dueDate).length !== 0) {\n                date = this.state.todoitem.dueDate.slice(0, 10);\n            }\n        }\n\n        return (\n\n            <div className=\"new-todo-item\">\n\n                <div className=\"field-set\">\n                    <label>Title: </label>\n                    <input type=\"text\" onChange={this.update.bind(this)} name=\"title\"\n                        value={this.state.todoitem.title}></input><br /><br />\n                    <span className=\"errormsg\">{this.state.errors[\"title\"]}</span>\n                    <br /><br />\n\n                    <label>Description: </label>\n                    <input type=\"text\" onChange={this.update.bind(this)} name=\"description\"\n                        value={this.state.todoitem.description}></input><br /><br />\n                    <span className=\"errormsg\">{this.state.errors[\"desc\"]}</span>\n                    <br /><br />\n\n                    <label>Due Date: </label>\n                    <input type=\"date\" onChange={this.update.bind(this)} name=\"dueDate\"\n                        value={date}></input><br /><br />\n                    <span className=\"errormsg\">{this.state.errors[\"dueDate\"]}</span>\n                    <br /><br />\n\n                    <label>Time: </label>\n                    <input type=\"time\" onChange={this.update.bind(this)} name=\"dueTime\"></input>\n                    <br /><br />\n                    <span className=\"errormsg\">{this.state.errors[\"dueTime\"]}</span>\n                    <br /><br />\n\n                    <button className=\"save-btn\" onClick={this.saveTodo.bind(this)}>Save</button>\n                    &nbsp;&nbsp;\n                    <button className=\"close-btn\" onClick={this.closeTodoDiv.bind(this)}>Close</button>\n                </div>\n\n            </div>\n        )\n    }\n}","import React from 'react';\nimport './TodoItem.scss';\n\nexport default class extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            todoitem: this.props.todo_item\n        };\n    }\n\n    /**\n     * This function sets true and todoitem object \n     * to showDetails in App.js to display other details \n     * of todo item.\n     */\n    todoDetails(evnt) {\n        this.props.showDetails(true, this.state.todoitem);\n    }\n\n    /**\n     * Marking todo as complete onclick of button\n     * and resetting complete button to Undo\n     */\n    completeTodo(evnt) {\n        let todoitem = this.state.todoitem;\n        todoitem.completed = !todoitem.completed;\n\n        this.setState({\n            todoitem\n        })\n        this.props.editTodoPut(this.state.todoitem);\n\n    }\n\n    /**\n     * Deletes todo item and removes div\n     */\n    deleteTodo(evnt) {\n        evnt.target.parentNode.remove();\n        this.props.deleteTodo(this.state.todoitem);\n    }\n\n\n    render() {\n        let todoComplete = this.state.todoitem.completed ? \"todo_complete\" : \"todo_incomplete\";\n        return (\n            <div className=\"todo-item\" id={this.state.todoitem.title}>\n                <p className={todoComplete} onClick={this.todoDetails.bind(this)}>{this.state.todoitem.title}</p>\n                <button className=\"complete-btn\" onClick={this.completeTodo.bind(this)}>\n                    {this.state.todoitem.completed ? \"Undo\" : \"Complete\"}</button>\n                <button className=\"delete-btn\" onClick={this.deleteTodo.bind(this)}>Delete</button>\n            </div>\n        )\n    }\n}","import React from 'react';\nimport './TodoList.scss';\nimport TodoItem from './../todoitems/TodoItem';\n\nexport default class extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n\n        };\n    }\n\n    /**\n     * Sets showDetails props with given parameters\n     * @param {boolean} show \n     * @param {Object} todo \n     */\n    showDetails(show, todo) {\n        this.props.showDetails(show, todo);\n    }\n\n    /**\n     * sets deleteTodo props with selected todo item to delete.\n     * @param {Object} todo \n     */\n    deleteTodo(todo) {\n        this.props.deleteTodo(todo);\n    }\n\n    render() {\n        let count = 0;\n        let todoList = this.props.todolist.map(c => {\n            count++;\n            return <TodoItem key={count} todo_item={c} showDetails={this.showDetails.bind(this)}\n                deleteTodo={this.deleteTodo.bind(this)}\n                editTodoPut={this.props.editTodoPut} />\n        });\n        return (\n            <div className=\"todo-list\">{todoList}</div>\n        )\n    }\n}","import React from 'react';\nimport './TodoDetails.scss';\nimport NewTodo from '../new-todo/NewTodo'\n\nexport default class extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            /** setting initial value of edit to false */\n            edit: false,\n            /** set to true to show NewTodo component */\n            showTodo: true\n        };\n    }\n    // componentWillMount(){\n    //     console.log(\"mount\");\n    //     if(this.props.showDetails){\n    //         this.setState({\n    //             showTodo: true\n    //           })\n    //     }\n    // }\n\n    /**\n     * sets edit state to true on click of edit button\n     */\n    editTodo(evnt) {\n        evnt.preventDefault();\n        this.setState({\n            edit: true\n        });\n    }\n\n    // closeTodoDiv(show){\n    //     this.setState({\n    //       showTodo: show\n    //     })\n    //   }\n\n    /** When clicked on edit NewTodo component will be rendered else\n     * shows only details of todo item with edit button to update\n    */\n    showDetails() {\n        if (!this.state.edit) {\n            return (\n                <div className=\"todo-item\">\n                    <h3>Selected Todo item details</h3>\n                    <p>Title: {this.props.details.title}</p>\n                    <p>Description: {this.props.details.description}</p>\n                    <p>Due Date: {this.props.details.dueDate}</p>\n                    <p>Time: {this.props.details.dueTime}</p>\n                    <button className=\"edit-btn\" onClick={this.editTodo.bind(this)}>Edit</button>\n\n                </div>\n            )\n        } else {\n\n            return (\n\n                <div>\n                    {this.state.showTodo &&\n                        <NewTodo add={this.props.add} edittodo={this.props.details}\n                            editTodoPut={this.props.editTodoPut} edit={true}\n                            close={this.props.resetEdit} />\n                    }\n                </div>\n            )\n        }\n    }\n\n    render() {\n        return (\n            <div>\n                {this.showDetails()}\n            </div>\n        )\n    }\n}","import React from 'react';\nimport './App.scss';\nimport NavBar from './nav-bar/Navbar';\nimport Toolbar from './toolbar/ToolBar';\nimport NewTodo from './new-todo/NewTodo';\nimport TodoList from './todolist/TodoList';\nimport TodoDetails from './tododetails/TodoDetails';\n\nexport default class extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      /** Page title*/\n      title: 'TODO App',\n      /**list to display on page load */\n      todolist: [],\n      /**error message shown when there is problem in loading page. */\n      errorMessage: '',\n      /**sets to true when user clicks on Add button and displays NewTodo page */\n      showAddTodo: false,\n      /**sets to true when user clicks on existing todo to display details. */\n      showDetails: false,\n      /**has all details of a todo item which are retrieved when clicked on todo div. */\n      todoDetails: '',\n      /** sets to true if todo is marked as complete */\n      completeTodo: false\n\n    };\n  }\n\n  /**\n   * GET request made to the server to retrieve existing todo list.\n   */\n  componentDidMount() {\n\n    fetch('http://localhost:5000/todos')\n      .then(async response => {\n        const data = await response.json();\n\n        if (!response.ok) {\n          const error = (data && data.message) || response.statusText;\n          return Promise.reject(error);\n        }\n        // adding retrieved data to todolist\n        this.setState({\n          todolist: data\n        })\n      })\n      .catch(error => {\n        this.setState({\n          errorMessage: error.toString()\n        });\n        alert('Error in loading page!', error);\n      });\n\n  }\n  /**\n   * This function sets showAddTodo to true when clicked on Add button\n   * @param {boolean} show\n   * */\n  showAddTodo(show) {\n    this.setState({\n      showAddTodo: show\n    })\n  }\n\n  /**\n   * This function makes a POST request and adds new todo item to database.\n   * @param {Object} newtodo\n   * \n   * */\n  addTodo(newtodo) {\n    //json data sent in body of the request\n    let data = {\n      title: newtodo.title,\n      description: newtodo.description,\n      dueDate: newtodo.dueDate,\n      dueTime: newtodo.dueTime,\n      completed: false\n    }\n\n    fetch('http://localhost:5000/todos/', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(data),\n    })\n      .then(response => response.json())\n      .then(data => {\n        alert(\"Successfully added todo item \");\n        window.location.reload();\n      })\n      .catch(error => alert('Error posting data: ', error));\n  }\n\n\n  /**\n   * This function sets showDetails to true and adds todo object details\n   * which is used to display details using TodoDetails component\n   * @param {boolean} show\n   * @param {Object} todoDetails\n  */\n  showDetails(show, todoDetails) {\n    this.setState({\n      showDetails: show,\n      todoDetails: todoDetails\n    })\n  }\n\n  /**\n   *when todo details are shown, on click of edit and saving new data, \n   * PUT request is made to update the object.\n   * @param {Object} todo\n   */\n  editTodoPut(todo) {\n    //updated json sent in request body\n    let data = {\n      title: todo.title,\n      description: todo.description,\n      dueDate: todo.dueDate,\n      dueTime: todo.dueTime,\n      completed: todo.completed\n    }\n\n    fetch('http://localhost:5000/todos/' + todo.id, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(data),\n    })\n      .then(response => response.json())\n      .then(data => {\n        alert(\"Successfully Updated todo item: \", data);\n        window.location.reload();\n      })\n      .catch(error => alert('Error updating data: ', error));\n  }\n\n  /**\n   * On click of delete button, DELETE request is made to remove \n   * todo item from existing list\n   * @param {Object} todo\n   */\n  deleteTodo(todo) {\n    let requestHeaders = {\n      method: 'DELETE'\n    };\n    fetch('http://localhost:5000/todos/' + todo.id, requestHeaders)\n      .then(response => response.text())\n      .then(res => {\n        alert(\"Deleted Successfully \", res);\n        window.location.reload();\n      })\n      .catch(error => alert(\"Cannot delete todo item \", error));\n  }\n\n  /**\n   * This function closes NewTodo div on click of close button\n   * @param {boolean} show\n   */\n  closeTodoDiv(show) {\n    this.setState({\n      showAddTodo: show\n    })\n  }\n\n  /**\n   * Resetting showDetails on click of close button.\n   * This helps to show TododDetails component on click of todo item again.\n   * @param {boolean} reset \n   */\n  resetEdit(reset) {\n    this.setState({\n      showDetails: reset,\n      todoDetails: {}\n    })\n  }\n\n  render() {\n    const obj = {};\n    return (\n      <div>\n        {/* NavBar component to display Page navigation bar*/}\n        <NavBar title={this.state.title} />\n\n        {/* Component to show add button */}\n        <Toolbar add={this.showAddTodo.bind(this)} />\n\n        {/**  NewTodo component is shown only when clicked on ADD button \n         * props : \n         *    add - holds addTodo function which adds new todo to database.\n         *    edit - set to false since new todo item is being added and not edited\n         *    edittodo - sends an empty object as a new todo is created.\n         *    close - holds closTodoDiv function to close the div.\n        */}\n        {this.state.showAddTodo &&\n          <NewTodo add={this.addTodo.bind(this)} edit={false} edittodo={obj}\n            close={this.closeTodoDiv.bind(this)} />\n        }\n\n        {/**component to display list of Todo items retrieved from GET request \n         * props:\n         *    todolist - list of retrieved todoitems from GET request.\n         *    showDetails - holds showdetails fucntion which which is used to display todo details.\n         *    deleteTodo - holds deleteTodo function which sends DELETE request\n        */}\n        <TodoList todolist={this.state.todolist} showDetails={this.showDetails.bind(this)}\n          deleteTodo={this.deleteTodo.bind(this)}\n          editTodoPut={this.editTodoPut.bind(this)} />\n\n        {/** TodoDetails component is shown only when user clicks on todo item title \n         * props:\n         *  details - holds details of todo item when clicked on todo in UI.\n         *  editTodoPut - holds function to send PUT request which updates todo item.\n         *  add - holds addTodo function which adds new todo to database. This is sent to NewTodo component.\n         *  resetEdit - holds resetEdit function.\n        */}\n        {\n          this.state.showDetails &&\n          <TodoDetails details={this.state.todoDetails} editTodoPut={this.editTodoPut.bind(this)}\n            add={this.addTodo.bind(this)} resetEdit={this.resetEdit.bind(this)} />\n        }\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './scss/main.scss';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}